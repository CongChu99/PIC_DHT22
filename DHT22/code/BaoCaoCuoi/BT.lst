CCS PCM C Compiler, Version 5.015, 5967               21-Oct-21 14:40

               Filename:   D:\nam5\thiet ke do luuong\DHT22\DHT22\code\BaoCaoCuoi\BT.lst

               ROM used:   2355 words (29%)
                           Largest free fragment is 2048
               RAM used:   110 (30%) at main() level
                           121 (33%) worst case
               Stack used: 6 locations
               Stack size: 8

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA D4,34
0005:  DATA ED,32
0006:  DATA A0,37
0007:  DATA 75,3A
0008:  DATA 21,00
0009:  DATA 43,34
000A:  DATA E5,31
000B:  DATA EB,39
000C:  DATA F5,36
000D:  DATA A0,22
000E:  DATA 72,39
000F:  DATA 6F,39
0010:  DATA 21,00
0011:  DATA CE,37
0012:  DATA 20,39
0013:  DATA E5,39
0014:  DATA F0,37
0015:  DATA EE,39
0016:  DATA 65,00
0017:  DATA 66,39
0018:  DATA EF,36
0019:  DATA 20,3A
001A:  DATA E8,32
001B:  DATA A0,39
001C:  DATA 65,37
001D:  DATA F3,37
001E:  DATA 72,00
001F:  DATA 4E,34
0020:  DATA EF,36
0021:  DATA A0,18
0022:  DATA 30,00
*
013C:  MOVF   0B,W
013D:  BSF    03.5
013E:  MOVWF  2C
013F:  BCF    03.5
0140:  BCF    0B.7
0141:  BSF    03.5
0142:  BSF    03.6
0143:  BSF    0C.7
0144:  BSF    0C.0
0145:  NOP
0146:  NOP
0147:  BCF    03.6
0148:  BTFSS  2C.7
0149:  GOTO   14D
014A:  BCF    03.5
014B:  BSF    0B.7
014C:  BSF    03.5
014D:  BCF    03.5
014E:  BSF    03.6
014F:  MOVF   0C,W
0150:  ANDLW  7F
0151:  BTFSC  03.2
0152:  GOTO   1AE
0153:  BSF    03.5
0154:  BCF    03.6
0155:  MOVWF  2C
0156:  BCF    03.5
0157:  BSF    03.6
0158:  MOVF   0D,W
0159:  BSF    03.5
015A:  BCF    03.6
015B:  MOVWF  2D
015C:  BCF    03.5
015D:  BSF    03.6
015E:  MOVF   0F,W
015F:  BSF    03.5
0160:  BCF    03.6
0161:  MOVWF  2E
0162:  MOVF   2C,W
0163:  MOVWF  2F
0164:  BCF    03.5
0165:  CALL   102
0166:  BSF    03.5
0167:  MOVF   2D,W
0168:  BCF    03.5
0169:  BSF    03.6
016A:  MOVWF  0D
016B:  BSF    03.5
016C:  BCF    03.6
016D:  MOVF   2E,W
016E:  BCF    03.5
016F:  BSF    03.6
0170:  MOVWF  0F
0171:  BCF    03.6
0172:  MOVF   0B,W
0173:  BSF    03.5
0174:  MOVWF  2F
0175:  BCF    03.5
0176:  BCF    0B.7
0177:  BSF    03.5
0178:  BSF    03.6
0179:  BSF    0C.7
017A:  BSF    0C.0
017B:  NOP
017C:  NOP
017D:  BCF    03.6
017E:  BTFSS  2F.7
017F:  GOTO   183
0180:  BCF    03.5
0181:  BSF    0B.7
0182:  BSF    03.5
0183:  BCF    03.5
0184:  BSF    03.6
0185:  RLF    0C,W
0186:  RLF    0E,W
0187:  ANDLW  7F
0188:  BTFSC  03.2
0189:  GOTO   1AE
018A:  BSF    03.5
018B:  BCF    03.6
018C:  MOVWF  2C
018D:  BCF    03.5
018E:  BSF    03.6
018F:  MOVF   0D,W
0190:  BSF    03.5
0191:  BCF    03.6
0192:  MOVWF  2D
0193:  BCF    03.5
0194:  BSF    03.6
0195:  MOVF   0F,W
0196:  BSF    03.5
0197:  BCF    03.6
0198:  MOVWF  2E
0199:  MOVF   2C,W
019A:  MOVWF  2F
019B:  BCF    03.5
019C:  CALL   102
019D:  BSF    03.5
019E:  MOVF   2D,W
019F:  BCF    03.5
01A0:  BSF    03.6
01A1:  MOVWF  0D
01A2:  BSF    03.5
01A3:  BCF    03.6
01A4:  MOVF   2E,W
01A5:  BCF    03.5
01A6:  BSF    03.6
01A7:  MOVWF  0F
01A8:  INCF   0D,F
01A9:  BTFSC  03.2
01AA:  INCF   0F,F
01AB:  BCF    03.6
01AC:  GOTO   13C
01AD:  BSF    03.6
01AE:  BCF    03.6
01AF:  RETURN
*
01C4:  CLRF   78
01C5:  CLRF   79
01C6:  CLRF   77
01C7:  CLRF   7A
01C8:  BSF    03.5
01C9:  MOVF   31,W
01CA:  BTFSS  03.2
01CB:  GOTO   1CF
01CC:  MOVF   30,W
01CD:  BTFSC  03.2
01CE:  GOTO   1E9
01CF:  MOVLW  10
01D0:  MOVWF  32
01D1:  BCF    03.0
01D2:  RLF    2E,F
01D3:  RLF    2F,F
01D4:  RLF    77,F
01D5:  RLF    7A,F
01D6:  MOVF   31,W
01D7:  SUBWF  7A,W
01D8:  BTFSS  03.2
01D9:  GOTO   1DC
01DA:  MOVF   30,W
01DB:  SUBWF  77,W
01DC:  BTFSS  03.0
01DD:  GOTO   1E5
01DE:  MOVF   30,W
01DF:  SUBWF  77,F
01E0:  BTFSS  03.0
01E1:  DECF   7A,F
01E2:  MOVF   31,W
01E3:  SUBWF  7A,F
01E4:  BSF    03.0
01E5:  RLF    78,F
01E6:  RLF    79,F
01E7:  DECFSZ 32,F
01E8:  GOTO   1D1
01E9:  BCF    03.5
01EA:  RETURN
01EB:  MOVF   00,F
01EC:  BTFSC  03.2
01ED:  GOTO   207
01EE:  BSF    03.5
01EF:  CLRF   2D
01F0:  MOVF   04,W
01F1:  MOVWF  2C
01F2:  BCF    2D.0
01F3:  BTFSC  03.7
01F4:  BSF    2D.0
01F5:  MOVF   00,W
01F6:  MOVWF  2F
01F7:  BCF    03.5
01F8:  CALL   102
01F9:  BSF    03.5
01FA:  MOVF   2C,W
01FB:  MOVWF  04
01FC:  BCF    03.7
01FD:  BTFSC  2D.0
01FE:  BSF    03.7
01FF:  INCF   04,F
0200:  BTFSS  03.2
0201:  GOTO   205
0202:  BCF    03.5
0203:  INCF   05,F
0204:  BSF    03.5
0205:  BCF    03.5
0206:  GOTO   1EB
0207:  RETURN
*
03E6:  MOVF   00,F
03E7:  BTFSC  03.2
03E8:  GOTO   403
03E9:  BSF    03.5
03EA:  CLRF   2D
03EB:  MOVF   04,W
03EC:  MOVWF  2C
03ED:  BCF    2D.0
03EE:  BTFSC  03.7
03EF:  BSF    2D.0
03F0:  MOVF   00,W
03F1:  BCF    03.5
03F2:  BTFSS  0C.4
03F3:  GOTO   3F2
03F4:  MOVWF  19
03F5:  BSF    03.5
03F6:  MOVF   2C,W
03F7:  MOVWF  04
03F8:  BCF    03.7
03F9:  BTFSC  2D.0
03FA:  BSF    03.7
03FB:  INCF   04,F
03FC:  BTFSS  03.2
03FD:  GOTO   401
03FE:  BCF    03.5
03FF:  INCF   05,F
0400:  BSF    03.5
0401:  BCF    03.5
0402:  GOTO   3E6
0403:  RETURN
*
0D26:  BSF    0A.0
0D27:  BCF    0A.1
0D28:  BSF    0A.2
0D29:  ADDWF  02,F
0D2A:  GOTO   25D
0D2B:  GOTO   2F0
0D2C:  GOTO   382
0D2D:  GOTO   415
0D2E:  GOTO   4A7
....................  
.................... #list 
....................  
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP                        
.................... #use delay(clock = 20000000) 
*
0023:  MOVLW  B1
0024:  MOVWF  04
0025:  BCF    03.7
0026:  MOVF   00,W
0027:  BTFSC  03.2
0028:  GOTO   036
0029:  MOVLW  06
002A:  MOVWF  78
002B:  CLRF   77
002C:  DECFSZ 77,F
002D:  GOTO   02C
002E:  DECFSZ 78,F
002F:  GOTO   02B
0030:  MOVLW  7B
0031:  MOVWF  77
0032:  DECFSZ 77,F
0033:  GOTO   032
0034:  DECFSZ 00,F
0035:  GOTO   029
0036:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0056:  MOVLW  0F
0057:  BSF    03.5
0058:  ANDWF  08,W
0059:  IORLW  F0
005A:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
005B:  BCF    03.5
005C:  BSF    08.2
....................    delay_cycles(1); 
005D:  NOP
....................    lcd_output_enable(1); 
005E:  BSF    08.0
....................    delay_cycles(1); 
005F:  NOP
....................    high = lcd_read_nibble(); 
0060:  CALL   04A
0061:  MOVF   78,W
0062:  BSF    03.5
0063:  MOVWF  37
....................        
....................    lcd_output_enable(0); 
0064:  BCF    03.5
0065:  BCF    08.0
....................    delay_cycles(1); 
0066:  NOP
....................    lcd_output_enable(1); 
0067:  BSF    08.0
....................    delay_us(1); 
0068:  GOTO   069
0069:  GOTO   06A
006A:  NOP
....................    low = lcd_read_nibble(); 
006B:  CALL   04A
006C:  MOVF   78,W
006D:  BSF    03.5
006E:  MOVWF  36
....................        
....................    lcd_output_enable(0); 
006F:  BCF    03.5
0070:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0071:  MOVLW  0F
0072:  BSF    03.5
0073:  ANDWF  08,W
0074:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0075:  SWAPF  37,W
0076:  MOVWF  77
0077:  MOVLW  F0
0078:  ANDWF  77,F
0079:  MOVF   77,W
007A:  IORWF  36,W
007B:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
004A:  MOVF   08,W
004B:  MOVWF  77
004C:  SWAPF  08,W
004D:  ANDLW  0F
004E:  MOVWF  78
....................   #endif 
004F:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0037:  BSF    03.5
0038:  SWAPF  37,W
0039:  ANDLW  F0
003A:  MOVWF  77
003B:  MOVLW  0F
003C:  BCF    03.5
003D:  ANDWF  08,W
003E:  IORWF  77,W
003F:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0040:  NOP
....................    lcd_output_enable(1); 
0041:  BSF    08.0
....................    delay_us(2); 
0042:  MOVLW  02
0043:  MOVWF  77
0044:  DECFSZ 77,F
0045:  GOTO   044
0046:  GOTO   047
0047:  NOP
....................    lcd_output_enable(0); 
0048:  BCF    08.0
0049:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0050:  BSF    03.5
0051:  BCF    08.0
....................    lcd_rs_tris(); 
0052:  BCF    08.1
....................    lcd_rw_tris(); 
0053:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0054:  BCF    03.5
0055:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
007C:  MOVF   78,W
007D:  MOVWF  36
007E:  BTFSS  36.7
007F:  GOTO   082
0080:  BCF    03.5
0081:  GOTO   056
....................    lcd_output_rs(address); 
0082:  BTFSC  34.0
0083:  GOTO   087
0084:  BCF    03.5
0085:  BCF    08.1
0086:  BSF    03.5
0087:  BTFSS  34.0
0088:  GOTO   08C
0089:  BCF    03.5
008A:  BSF    08.1
008B:  BSF    03.5
....................    delay_cycles(1); 
008C:  NOP
....................    lcd_output_rw(0); 
008D:  BCF    03.5
008E:  BCF    08.2
....................    delay_cycles(1); 
008F:  NOP
....................    lcd_output_enable(0); 
0090:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0091:  BSF    03.5
0092:  SWAPF  35,W
0093:  MOVWF  36
0094:  MOVLW  0F
0095:  ANDWF  36,F
0096:  MOVF   36,W
0097:  MOVWF  37
0098:  BCF    03.5
0099:  CALL   037
....................    lcd_send_nibble(n & 0xf); 
009A:  BSF    03.5
009B:  MOVF   35,W
009C:  ANDLW  0F
009D:  MOVWF  36
009E:  MOVWF  37
009F:  BCF    03.5
00A0:  CALL   037
00A1:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00A2:  MOVLW  28
00A3:  BSF    03.5
00A4:  MOVWF  2D
00A5:  MOVLW  0C
00A6:  MOVWF  2E
00A7:  MOVLW  01
00A8:  MOVWF  2F
00A9:  MOVLW  06
00AA:  MOVWF  30
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00AB:  BCF    03.5
00AC:  BCF    08.0
....................    lcd_output_rs(0); 
00AD:  BCF    08.1
....................    lcd_output_rw(0); 
00AE:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00AF:  MOVLW  0F
00B0:  BSF    03.5
00B1:  ANDWF  08,W
00B2:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00B3:  BCF    08.0
....................    lcd_rs_tris(); 
00B4:  BCF    08.1
....................    lcd_rw_tris(); 
00B5:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
00B6:  MOVLW  0F
00B7:  MOVWF  31
00B8:  BCF    03.5
00B9:  CALL   023
....................    for(i=1;i<=3;++i) 
00BA:  MOVLW  01
00BB:  BSF    03.5
00BC:  MOVWF  2C
00BD:  MOVF   2C,W
00BE:  SUBLW  03
00BF:  BTFSS  03.0
00C0:  GOTO   0CD
....................    { 
....................        lcd_send_nibble(3); 
00C1:  MOVLW  03
00C2:  MOVWF  37
00C3:  BCF    03.5
00C4:  CALL   037
....................        delay_ms(5); 
00C5:  MOVLW  05
00C6:  BSF    03.5
00C7:  MOVWF  31
00C8:  BCF    03.5
00C9:  CALL   023
00CA:  BSF    03.5
00CB:  INCF   2C,F
00CC:  GOTO   0BD
....................    } 
....................     
....................    lcd_send_nibble(2); 
00CD:  MOVLW  02
00CE:  MOVWF  37
00CF:  BCF    03.5
00D0:  CALL   037
....................    delay_ms(5); 
00D1:  MOVLW  05
00D2:  BSF    03.5
00D3:  MOVWF  31
00D4:  BCF    03.5
00D5:  CALL   023
....................    for(i=0;i<=3;++i) 
00D6:  BSF    03.5
00D7:  CLRF   2C
00D8:  MOVF   2C,W
00D9:  SUBLW  03
00DA:  BTFSS  03.0
00DB:  GOTO   0EA
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00DC:  MOVLW  AD
00DD:  ADDWF  2C,W
00DE:  MOVWF  04
00DF:  BCF    03.7
00E0:  MOVF   00,W
00E1:  MOVWF  31
00E2:  CLRF   34
00E3:  MOVF   31,W
00E4:  MOVWF  35
00E5:  BCF    03.5
00E6:  CALL   050
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00E7:  BSF    03.5
00E8:  INCF   2C,F
00E9:  GOTO   0D8
00EA:  BCF    03.5
00EB:  BSF    0A.3
00EC:  BCF    0A.4
00ED:  GOTO   0B9 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00EE:  BSF    03.5
00EF:  DECFSZ 31,W
00F0:  GOTO   0F2
00F1:  GOTO   0F5
....................       address=LCD_LINE_TWO; 
00F2:  MOVLW  40
00F3:  MOVWF  32
00F4:  GOTO   0F6
....................    else 
....................       address=0; 
00F5:  CLRF   32
....................       
....................    address+=x-1; 
00F6:  MOVLW  01
00F7:  SUBWF  30,W
00F8:  ADDWF  32,F
....................    lcd_send_byte(0,0x80|address); 
00F9:  MOVF   32,W
00FA:  IORLW  80
00FB:  MOVWF  33
00FC:  CLRF   34
00FD:  MOVF   33,W
00FE:  MOVWF  35
00FF:  BCF    03.5
0100:  CALL   050
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0101:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0102:  BSF    03.5
0103:  MOVF   2F,W
0104:  XORLW  07
0105:  BCF    03.5
0106:  BTFSC  03.2
0107:  GOTO   112
0108:  XORLW  0B
0109:  BTFSC  03.2
010A:  GOTO   119
010B:  XORLW  06
010C:  BTFSC  03.2
010D:  GOTO   125
010E:  XORLW  02
010F:  BTFSC  03.2
0110:  GOTO   12D
0111:  GOTO   134
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0112:  MOVLW  01
0113:  BSF    03.5
0114:  MOVWF  30
0115:  MOVWF  31
0116:  BCF    03.5
0117:  CALL   0EE
0118:  GOTO   13B
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0119:  BSF    03.5
011A:  CLRF   34
011B:  MOVLW  01
011C:  MOVWF  35
011D:  BCF    03.5
011E:  CALL   050
....................                      delay_ms(2); 
011F:  MOVLW  02
0120:  BSF    03.5
0121:  MOVWF  31
0122:  BCF    03.5
0123:  CALL   023
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0124:  GOTO   13B
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0125:  MOVLW  01
0126:  BSF    03.5
0127:  MOVWF  30
0128:  MOVLW  02
0129:  MOVWF  31
012A:  BCF    03.5
012B:  CALL   0EE
012C:  GOTO   13B
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
012D:  BSF    03.5
012E:  CLRF   34
012F:  MOVLW  10
0130:  MOVWF  35
0131:  BCF    03.5
0132:  CALL   050
0133:  GOTO   13B
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0134:  MOVLW  01
0135:  BSF    03.5
0136:  MOVWF  34
0137:  MOVF   2F,W
0138:  MOVWF  35
0139:  BCF    03.5
013A:  CALL   050
....................      #endif 
....................    } 
013B:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #use fast_io(c) 
.................... // Connection pin between PIC16F877A and DHT22 sensor 
.................... #BIT Data_Pin = 0x06.0                       // Pin mapped to PORTD.0 
.................... #BIT Data_Pin_Direction = 0x86.0             // Pin direction mapped to TRISD.0 
.................... #use rs232(baud=38400,UART1,parity=N,bits=8) 
....................  
.................... char message1[] = "Temp = 00.0 C"; 
*
0820:  MOVLW  54
0821:  BCF    03.5
0822:  MOVWF  20
0823:  MOVLW  65
0824:  MOVWF  21
0825:  MOVLW  6D
0826:  MOVWF  22
0827:  MOVLW  70
0828:  MOVWF  23
0829:  MOVLW  20
082A:  MOVWF  24
082B:  MOVLW  3D
082C:  MOVWF  25
082D:  MOVLW  20
082E:  MOVWF  26
082F:  MOVLW  30
0830:  MOVWF  27
0831:  MOVWF  28
0832:  MOVLW  2E
0833:  MOVWF  29
0834:  MOVLW  30
0835:  MOVWF  2A
0836:  MOVLW  20
0837:  MOVWF  2B
0838:  MOVLW  43
0839:  MOVWF  2C
083A:  CLRF   2D
.................... char message2[] = "RH   = 00.0 %"; 
083B:  MOVLW  52
083C:  MOVWF  2E
083D:  MOVLW  48
083E:  MOVWF  2F
083F:  MOVLW  20
0840:  MOVWF  30
0841:  MOVWF  31
0842:  MOVWF  32
0843:  MOVLW  3D
0844:  MOVWF  33
0845:  MOVLW  20
0846:  MOVWF  34
0847:  MOVLW  30
0848:  MOVWF  35
0849:  MOVWF  36
084A:  MOVLW  2E
084B:  MOVWF  37
084C:  MOVLW  30
084D:  MOVWF  38
084E:  MOVLW  20
084F:  MOVWF  39
0850:  MOVLW  25
0851:  MOVWF  3A
0852:  CLRF   3B
.................... char message3[] = "Tem1 = 00.0 C"; 
0853:  MOVLW  54
0854:  MOVWF  3C
0855:  MOVLW  65
0856:  MOVWF  3D
0857:  MOVLW  6D
0858:  MOVWF  3E
0859:  MOVLW  31
085A:  MOVWF  3F
085B:  MOVLW  20
085C:  MOVWF  40
085D:  MOVLW  3D
085E:  MOVWF  41
085F:  MOVLW  20
0860:  MOVWF  42
0861:  MOVLW  30
0862:  MOVWF  43
0863:  MOVWF  44
0864:  MOVLW  2E
0865:  MOVWF  45
0866:  MOVLW  30
0867:  MOVWF  46
0868:  MOVLW  20
0869:  MOVWF  47
086A:  MOVLW  43
086B:  MOVWF  48
086C:  CLRF   49
.................... char message4[] = "Tem2 = 00.0 C"; 
086D:  MOVLW  54
086E:  MOVWF  4A
086F:  MOVLW  65
0870:  MOVWF  4B
0871:  MOVLW  6D
0872:  MOVWF  4C
0873:  MOVLW  32
0874:  MOVWF  4D
0875:  MOVLW  20
0876:  MOVWF  4E
0877:  MOVLW  3D
0878:  MOVWF  4F
0879:  MOVLW  20
087A:  MOVWF  50
087B:  MOVLW  30
087C:  MOVWF  51
087D:  MOVWF  52
087E:  MOVLW  2E
087F:  MOVWF  53
0880:  MOVLW  30
0881:  MOVWF  54
0882:  MOVLW  20
0883:  MOVWF  55
0884:  MOVLW  43
0885:  MOVWF  56
0886:  CLRF   57
.................... char message5[] = "H1   = 00.0 %"; 
0887:  MOVLW  48
0888:  MOVWF  58
0889:  MOVLW  31
088A:  MOVWF  59
088B:  MOVLW  20
088C:  MOVWF  5A
088D:  MOVWF  5B
088E:  MOVWF  5C
088F:  MOVLW  3D
0890:  MOVWF  5D
0891:  MOVLW  20
0892:  MOVWF  5E
0893:  MOVLW  30
0894:  MOVWF  5F
0895:  MOVWF  60
0896:  MOVLW  2E
0897:  MOVWF  61
0898:  MOVLW  30
0899:  MOVWF  62
089A:  MOVLW  20
089B:  MOVWF  63
089C:  MOVLW  25
089D:  MOVWF  64
089E:  CLRF   65
.................... char message6[] = "H2   = 00.0 %"; 
089F:  MOVLW  48
08A0:  MOVWF  66
08A1:  MOVLW  32
08A2:  MOVWF  67
08A3:  MOVLW  20
08A4:  MOVWF  68
08A5:  MOVWF  69
08A6:  MOVWF  6A
08A7:  MOVLW  3D
08A8:  MOVWF  6B
08A9:  MOVLW  20
08AA:  MOVWF  6C
08AB:  MOVLW  30
08AC:  MOVWF  6D
08AD:  MOVWF  6E
08AE:  MOVLW  2E
08AF:  MOVWF  6F
08B0:  MOVLW  30
08B1:  MOVWF  70
08B2:  MOVLW  20
08B3:  MOVWF  71
08B4:  MOVLW  25
08B5:  MOVWF  72
08B6:  CLRF   73
.................... short Time_out ; 
.................... unsigned int8 T_byte1, T_byte2, RH_byte1, RH_byte2, CheckSum ; 
.................... unsigned int16 Temp, RH,T1 = 0,T2 = 300; 
.................... unsigned int16 RH1 = 0, RH2 = 500; 
.................... int set = 0; 
.................... void nut() 
.................... { 
....................    if(input(pin_d3)==0) 
*
01B0:  BSF    03.5
01B1:  BSF    08.3
01B2:  BCF    03.5
01B3:  BTFSC  08.3
01B4:  GOTO   1C1
....................    { 
....................       while(input(pin_d3)==0) 
01B5:  BSF    03.5
01B6:  BSF    08.3
01B7:  BCF    03.5
01B8:  BTFSS  08.3
....................       { 
01B9:  GOTO   1B5
....................       } 
....................       set++; 
01BA:  INCF   7E,F
....................       if(set>5){set=1;} 
01BB:  MOVF   7E,W
01BC:  SUBLW  05
01BD:  BTFSC  03.0
01BE:  GOTO   1C1
01BF:  MOVLW  01
01C0:  MOVWF  7E
....................    } 
01C1:  BSF    0A.3
01C2:  BCF    0A.4
01C3:  GOTO   0D5 (RETURN)
.................... } 
.................... void start_signal(){ 
....................   Data_Pin_Direction = 0;              // Configure connection pin as output 
*
0267:  BCF    06.0
....................   Data_Pin = 0;                        // Connection pin output low 
0268:  BCF    03.5
0269:  BCF    06.0
....................   delay_ms(25); 
026A:  MOVLW  19
026B:  BSF    03.5
026C:  MOVWF  31
026D:  BCF    03.5
026E:  CALL   023
....................   Data_Pin = 1;                        // Connection pin output high 
026F:  BSF    06.0
....................   delay_us(30); 
0270:  MOVLW  31
0271:  MOVWF  77
0272:  DECFSZ 77,F
0273:  GOTO   272
0274:  GOTO   275
....................   Data_Pin_Direction = 1;              // Configure connection pin as input 
0275:  BSF    03.5
0276:  BSF    06.0
.................... } 
.................... short check_response(){ 
....................   delay_us(40); 
0277:  MOVLW  42
0278:  MOVWF  77
0279:  DECFSZ 77,F
027A:  GOTO   279
027B:  NOP
....................   if(!Data_Pin){                     // Read and test if connection pin is low 
027C:  BCF    03.5
027D:  BTFSC  06.0
027E:  GOTO   28F
....................     delay_us(80); 
027F:  MOVLW  84
0280:  MOVWF  77
0281:  DECFSZ 77,F
0282:  GOTO   281
0283:  GOTO   284
0284:  NOP
....................     if(Data_Pin){                    // Read and test if connection pin is high 
0285:  BTFSS  06.0
0286:  GOTO   28F
....................       delay_us(50); 
0287:  MOVLW  52
0288:  MOVWF  77
0289:  DECFSZ 77,F
028A:  GOTO   289
028B:  GOTO   28C
028C:  NOP
....................       return 1;} 
028D:  MOVLW  01
028E:  MOVWF  78
....................     } 
.................... } 
.................... unsigned int8 Read_Data(){ 
*
0208:  BSF    03.5
0209:  CLRF   2E
....................   unsigned int8 i, k, _data = 0;     // k is used to count 1 bit reading duration 
....................   if(Time_out) 
020A:  BTFSS  74.0
020B:  GOTO   20C
....................     break; 
....................   for(i = 0; i < 8; i++){     k = 0;     while(!Data_Pin){ // Wait until pin goes high       k++;       if (k > 100) {Time_out = 1; break;} 
020C:  CLRF   2C
020D:  MOVF   2C,W
020E:  SUBLW  07
020F:  BTFSS  03.0
0210:  GOTO   258
0211:  CLRF   2D
0212:  BCF    03.5
0213:  BTFSC  06.0
0214:  GOTO   219
....................       delay_us(1);} 
0215:  GOTO   216
0216:  GOTO   217
0217:  NOP
0218:  GOTO   213
....................     delay_us(30); 
0219:  MOVLW  31
021A:  MOVWF  77
021B:  DECFSZ 77,F
021C:  GOTO   21B
021D:  GOTO   21E
....................     if(!Data_Pin) 
021E:  BTFSC  06.0
021F:  GOTO   233
....................       bit_clear(_data, (7 - i));               // Clear bit (7 - i) 
0220:  BSF    03.5
0221:  MOVF   2C,W
0222:  SUBLW  07
0223:  MOVWF  2F
0224:  MOVLW  01
0225:  MOVWF  77
0226:  MOVF   2F,W
0227:  MOVWF  78
0228:  BTFSC  03.2
0229:  GOTO   22E
022A:  BCF    03.0
022B:  RLF    77,F
022C:  DECFSZ 78,F
022D:  GOTO   22A
022E:  MOVF   77,W
022F:  XORLW  FF
0230:  ANDWF  2E,F
0231:  GOTO   254
0232:  BCF    03.5
....................     else{ 
....................       bit_set(_data, (7 - i));                 // Set bit (7 - i) 
0233:  BSF    03.5
0234:  MOVF   2C,W
0235:  SUBLW  07
0236:  MOVWF  2F
0237:  MOVLW  01
0238:  MOVWF  77
0239:  MOVF   2F,W
023A:  MOVWF  78
023B:  BTFSC  03.2
023C:  GOTO   241
023D:  BCF    03.0
023E:  RLF    77,F
023F:  DECFSZ 78,F
0240:  GOTO   23D
0241:  MOVF   77,W
0242:  IORWF  2E,F
....................       while(Data_Pin){                         // Wait until pin goes low 
0243:  BCF    03.5
0244:  BTFSS  06.0
0245:  GOTO   255
....................       k++; 
0246:  BSF    03.5
0247:  INCF   2D,F
....................       if (k > 100) {Time_out = 1; break;} 
0248:  MOVF   2D,W
0249:  SUBLW  64
024A:  BTFSC  03.0
024B:  GOTO   250
024C:  BSF    74.0
024D:  BCF    03.5
024E:  GOTO   255
024F:  BSF    03.5
....................       delay_us(1);} 
0250:  GOTO   251
0251:  GOTO   252
0252:  NOP
0253:  GOTO   243
0254:  BCF    03.5
....................     } 
0255:  BSF    03.5
0256:  INCF   2C,F
0257:  GOTO   20D
....................   } 
....................   return _data; 
0258:  MOVF   2E,W
0259:  MOVWF  78
025A:  BCF    03.5
025B:  RETURN
.................... } 
....................  
.................... void DHT22(){ 
....................     delay_ms(1000); 
025C:  MOVLW  04
025D:  BSF    03.5
025E:  MOVWF  2C
025F:  MOVLW  FA
0260:  MOVWF  31
0261:  BCF    03.5
0262:  CALL   023
0263:  BSF    03.5
0264:  DECFSZ 2C,F
0265:  GOTO   25F
....................     Time_out = 0; 
0266:  BCF    74.0
....................     Start_signal(); 
....................     if(check_response()){                    // If there is response from sensor 
*
028F:  MOVF   78,F
0290:  BTFSC  03.2
0291:  GOTO   3C2
....................       RH_byte1 = Read_Data();                 // read RH byte1 
0292:  CALL   208
0293:  MOVF   78,W
0294:  MOVWF  7B
....................       RH_byte2 = Read_Data();                 // read RH byte2 
0295:  CALL   208
0296:  MOVF   78,W
0297:  MOVWF  7C
....................       T_byte1 = Read_Data();                  // read T byte1 
0298:  CALL   208
0299:  MOVF   78,W
029A:  MOVWF  75
....................       T_byte2 = Read_Data();                  // read T byte2 
029B:  CALL   208
029C:  MOVF   78,W
029D:  MOVWF  76
....................       Checksum = Read_Data();                 // read checksum 
029E:  CALL   208
029F:  MOVF   78,W
02A0:  MOVWF  7D
....................       if(Time_out){                           // If reading takes long time 
02A1:  BTFSS  74.0
02A2:  GOTO   2B7
....................         lcd_putc('\f');                       // LCD clear 
02A3:  MOVLW  0C
02A4:  BSF    03.5
02A5:  MOVWF  2F
02A6:  BCF    03.5
02A7:  CALL   102
....................         lcd_gotoxy(5, 1);                     // Go to column 5 row 1 
02A8:  MOVLW  05
02A9:  BSF    03.5
02AA:  MOVWF  30
02AB:  MOVLW  01
02AC:  MOVWF  31
02AD:  BCF    03.5
02AE:  CALL   0EE
....................         lcd_putc("Time out!"); 
02AF:  MOVLW  04
02B0:  BSF    03.6
02B1:  MOVWF  0D
02B2:  MOVLW  00
02B3:  MOVWF  0F
02B4:  BCF    03.6
02B5:  CALL   13C
....................       } 
02B6:  GOTO   3C1
....................       else{ 
....................        if(CheckSum == ((RH_Byte1 + RH_Byte2 + T_Byte1 + T_Byte2) & 0xFF)){ 
02B7:  MOVF   7C,W
02B8:  ADDWF  7B,W
02B9:  ADDWF  75,W
02BA:  ADDWF  76,W
02BB:  SUBWF  7D,W
02BC:  BTFSS  03.2
02BD:  GOTO   3AF
....................         RH = RH_byte1; 
02BE:  BSF    03.5
02BF:  CLRF   23
02C0:  MOVF   7B,W
02C1:  MOVWF  22
....................         RH = (RH << 8) | RH_byte2; 
02C2:  MOVF   22,W
02C3:  MOVWF  2D
02C4:  CLRF   2C
02C5:  MOVF   2C,W
02C6:  IORWF  7C,W
02C7:  MOVWF  22
02C8:  MOVF   2D,W
02C9:  MOVWF  23
....................         Temp = T_byte1; 
02CA:  CLRF   21
02CB:  MOVF   75,W
02CC:  MOVWF  20
....................         Temp = (Temp << 8) | T_byte2;         if (Temp > 0X8000){ 
02CD:  MOVF   20,W
02CE:  MOVWF  2D
02CF:  CLRF   2C
02D0:  MOVF   2C,W
02D1:  IORWF  76,W
02D2:  MOVWF  20
02D3:  MOVF   2D,W
02D4:  MOVWF  21
02D5:  SUBLW  7F
02D6:  BTFSC  03.0
02D7:  GOTO   2E5
02D8:  XORLW  FF
02D9:  BTFSS  03.2
02DA:  GOTO   2DF
02DB:  MOVF   20,W
02DC:  SUBLW  00
02DD:  BTFSC  03.0
02DE:  GOTO   2E5
....................          message1[6] = '-'; 
02DF:  MOVLW  2D
02E0:  BCF    03.5
02E1:  MOVWF  26
....................          Temp = Temp & 0X7FFF; } 
02E2:  BSF    03.5
02E3:  BCF    21.7
02E4:  GOTO   2E9
....................         else 
....................          message1[6] = ' '; 
02E5:  MOVLW  20
02E6:  BCF    03.5
02E7:  MOVWF  26
02E8:  BSF    03.5
....................         message1[7]  = (Temp / 100) % 10  + 48; 
02E9:  MOVF   21,W
02EA:  MOVWF  2F
02EB:  MOVF   20,W
02EC:  MOVWF  2E
02ED:  CLRF   31
02EE:  MOVLW  64
02EF:  MOVWF  30
02F0:  BCF    03.5
02F1:  CALL   1C4
02F2:  MOVF   79,W
02F3:  BSF    03.5
02F4:  MOVWF  2D
02F5:  MOVF   78,W
02F6:  MOVWF  2C
02F7:  MOVF   2D,W
02F8:  MOVWF  2F
02F9:  MOVF   2C,W
02FA:  MOVWF  2E
02FB:  CLRF   31
02FC:  MOVLW  0A
02FD:  MOVWF  30
02FE:  BCF    03.5
02FF:  CALL   1C4
0300:  MOVF   77,W
0301:  BSF    03.5
0302:  MOVWF  2C
0303:  MOVF   7A,W
0304:  MOVWF  2D
0305:  MOVLW  30
0306:  ADDWF  2C,W
0307:  BCF    03.5
0308:  MOVWF  27
....................         message1[8]  = (Temp / 10) % 10  + 48; 
0309:  BSF    03.5
030A:  MOVF   21,W
030B:  MOVWF  2F
030C:  MOVF   20,W
030D:  MOVWF  2E
030E:  CLRF   31
030F:  MOVLW  0A
0310:  MOVWF  30
0311:  BCF    03.5
0312:  CALL   1C4
0313:  MOVF   79,W
0314:  BSF    03.5
0315:  MOVWF  2D
0316:  MOVF   78,W
0317:  MOVWF  2C
0318:  MOVF   2D,W
0319:  MOVWF  2F
031A:  MOVF   2C,W
031B:  MOVWF  2E
031C:  CLRF   31
031D:  MOVLW  0A
031E:  MOVWF  30
031F:  BCF    03.5
0320:  CALL   1C4
0321:  MOVF   77,W
0322:  BSF    03.5
0323:  MOVWF  2C
0324:  MOVF   7A,W
0325:  MOVWF  2D
0326:  MOVLW  30
0327:  ADDWF  2C,W
0328:  BCF    03.5
0329:  MOVWF  28
....................         message1[10] = Temp % 10  + 48; 
032A:  BSF    03.5
032B:  MOVF   21,W
032C:  MOVWF  2F
032D:  MOVF   20,W
032E:  MOVWF  2E
032F:  CLRF   31
0330:  MOVLW  0A
0331:  MOVWF  30
0332:  BCF    03.5
0333:  CALL   1C4
0334:  MOVF   77,W
0335:  BSF    03.5
0336:  MOVWF  2C
0337:  MOVF   7A,W
0338:  MOVWF  2D
0339:  MOVLW  30
033A:  ADDWF  2C,W
033B:  BCF    03.5
033C:  MOVWF  2A
....................         message2[7]  = (RH / 100) % 10 + 48; 
033D:  BSF    03.5
033E:  MOVF   23,W
033F:  MOVWF  2F
0340:  MOVF   22,W
0341:  MOVWF  2E
0342:  CLRF   31
0343:  MOVLW  64
0344:  MOVWF  30
0345:  BCF    03.5
0346:  CALL   1C4
0347:  MOVF   79,W
0348:  BSF    03.5
0349:  MOVWF  2D
034A:  MOVF   78,W
034B:  MOVWF  2C
034C:  MOVF   2D,W
034D:  MOVWF  2F
034E:  MOVF   2C,W
034F:  MOVWF  2E
0350:  CLRF   31
0351:  MOVLW  0A
0352:  MOVWF  30
0353:  BCF    03.5
0354:  CALL   1C4
0355:  MOVF   77,W
0356:  BSF    03.5
0357:  MOVWF  2C
0358:  MOVF   7A,W
0359:  MOVWF  2D
035A:  MOVLW  30
035B:  ADDWF  2C,W
035C:  BCF    03.5
035D:  MOVWF  35
....................         message2[8]  = (RH / 10) % 10 + 48; 
035E:  BSF    03.5
035F:  MOVF   23,W
0360:  MOVWF  2F
0361:  MOVF   22,W
0362:  MOVWF  2E
0363:  CLRF   31
0364:  MOVLW  0A
0365:  MOVWF  30
0366:  BCF    03.5
0367:  CALL   1C4
0368:  MOVF   79,W
0369:  BSF    03.5
036A:  MOVWF  2D
036B:  MOVF   78,W
036C:  MOVWF  2C
036D:  MOVF   2D,W
036E:  MOVWF  2F
036F:  MOVF   2C,W
0370:  MOVWF  2E
0371:  CLRF   31
0372:  MOVLW  0A
0373:  MOVWF  30
0374:  BCF    03.5
0375:  CALL   1C4
0376:  MOVF   77,W
0377:  BSF    03.5
0378:  MOVWF  2C
0379:  MOVF   7A,W
037A:  MOVWF  2D
037B:  MOVLW  30
037C:  ADDWF  2C,W
037D:  BCF    03.5
037E:  MOVWF  36
....................         message2[10] = RH % 10 + 48; 
037F:  BSF    03.5
0380:  MOVF   23,W
0381:  MOVWF  2F
0382:  MOVF   22,W
0383:  MOVWF  2E
0384:  CLRF   31
0385:  MOVLW  0A
0386:  MOVWF  30
0387:  BCF    03.5
0388:  CALL   1C4
0389:  MOVF   77,W
038A:  BSF    03.5
038B:  MOVWF  2C
038C:  MOVF   7A,W
038D:  MOVWF  2D
038E:  MOVLW  30
038F:  ADDWF  2C,W
0390:  BCF    03.5
0391:  MOVWF  38
....................         message1[11] = 223;                   // Degree symbol 
0392:  MOVLW  DF
0393:  MOVWF  2B
....................         lcd_putc('\f');                       // LCD clear     
0394:  MOVLW  0C
0395:  BSF    03.5
0396:  MOVWF  2F
0397:  BCF    03.5
0398:  CALL   102
....................         lcd_gotoxy(1, 1);                     // Go to column 1 row 1 
0399:  MOVLW  01
039A:  BSF    03.5
039B:  MOVWF  30
039C:  MOVWF  31
039D:  BCF    03.5
039E:  CALL   0EE
....................         printf(lcd_putc,message1);           // Display message1 
039F:  MOVLW  20
03A0:  MOVWF  04
03A1:  BCF    03.7
03A2:  CALL   1EB
....................         lcd_gotoxy(1, 2);                     // Go to column 1 row 2 
03A3:  MOVLW  01
03A4:  BSF    03.5
03A5:  MOVWF  30
03A6:  MOVLW  02
03A7:  MOVWF  31
03A8:  BCF    03.5
03A9:  CALL   0EE
....................         printf(lcd_putc, message2);           // Display message2 
03AA:  MOVLW  2E
03AB:  MOVWF  04
03AC:  BCF    03.7
03AD:  CALL   1EB
....................        } 
03AE:  GOTO   3C1
....................         else { 
....................           lcd_putc('\f');                     // LCD clear 
03AF:  MOVLW  0C
03B0:  BSF    03.5
03B1:  MOVWF  2F
03B2:  BCF    03.5
03B3:  CALL   102
....................           lcd_gotoxy(1, 1);                   // Go to column 1 row 1 
03B4:  MOVLW  01
03B5:  BSF    03.5
03B6:  MOVWF  30
03B7:  MOVWF  31
03B8:  BCF    03.5
03B9:  CALL   0EE
....................           lcd_putc("Checksum Error!"); 
03BA:  MOVLW  09
03BB:  BSF    03.6
03BC:  MOVWF  0D
03BD:  MOVLW  00
03BE:  MOVWF  0F
03BF:  BCF    03.6
03C0:  CALL   13C
....................         } 
....................       } 
....................     } 
03C1:  GOTO   3E3
....................     else { 
....................       lcd_putc('\f');             // LCD clear 
03C2:  MOVLW  0C
03C3:  BSF    03.5
03C4:  MOVWF  2F
03C5:  BCF    03.5
03C6:  CALL   102
....................       lcd_gotoxy(3, 1);           // Go to column 3 row 1 
03C7:  MOVLW  03
03C8:  BSF    03.5
03C9:  MOVWF  30
03CA:  MOVLW  01
03CB:  MOVWF  31
03CC:  BCF    03.5
03CD:  CALL   0EE
....................       lcd_putc("No response"); 
03CE:  MOVLW  11
03CF:  BSF    03.6
03D0:  MOVWF  0D
03D1:  MOVLW  00
03D2:  MOVWF  0F
03D3:  BCF    03.6
03D4:  CALL   13C
....................       lcd_gotoxy(1, 2);           // Go to column 1 row 2 
03D5:  MOVLW  01
03D6:  BSF    03.5
03D7:  MOVWF  30
03D8:  MOVLW  02
03D9:  MOVWF  31
03DA:  BCF    03.5
03DB:  CALL   0EE
....................       lcd_putc("from the sensor"); 
03DC:  MOVLW  17
03DD:  BSF    03.6
03DE:  MOVWF  0D
03DF:  MOVLW  00
03E0:  MOVWF  0F
03E1:  BCF    03.6
03E2:  CALL   13C
....................     } 
03E3:  BSF    0A.3
03E4:  BCF    0A.4
03E5:  GOTO   4A9 (RETURN)
....................   } 
....................  
....................  
.................... void main(){ 
*
0800:  MOVF   03,W
0801:  ANDLW  1F
0802:  MOVWF  03
0803:  MOVLW  20
0804:  BSF    03.5
0805:  MOVWF  19
0806:  MOVLW  A6
0807:  MOVWF  18
0808:  MOVLW  90
0809:  BCF    03.5
080A:  MOVWF  18
080B:  BSF    03.5
080C:  CLRF   25
080D:  CLRF   24
080E:  MOVLW  01
080F:  MOVWF  27
0810:  MOVLW  2C
0811:  MOVWF  26
0812:  CLRF   29
0813:  CLRF   28
0814:  MOVLW  01
0815:  MOVWF  2B
0816:  MOVLW  F4
0817:  MOVWF  2A
0818:  CLRF   7E
0819:  BSF    1F.0
081A:  BSF    1F.1
081B:  BSF    1F.2
081C:  BCF    1F.3
081D:  MOVLW  07
081E:  MOVWF  1C
081F:  BCF    03.7
....................   lcd_init();                                 // Initialize LCD module 
*
08B7:  BCF    0A.3
08B8:  GOTO   0A2
08B9:  BSF    0A.3
....................   lcd_putc('\f');                             // LCD clear  
08BA:  MOVLW  0C
08BB:  BSF    03.5
08BC:  MOVWF  2F
08BD:  BCF    0A.3
08BE:  BCF    03.5
08BF:  CALL   102
08C0:  BSF    0A.3
....................   lcd_gotoxy(5,1); 
08C1:  MOVLW  05
08C2:  BSF    03.5
08C3:  MOVWF  30
08C4:  MOVLW  01
08C5:  MOVWF  31
08C6:  BCF    0A.3
08C7:  BCF    03.5
08C8:  CALL   0EE
08C9:  BSF    0A.3
....................    lcd_putc("Nhom 10"); 
08CA:  MOVLW  1F
08CB:  BSF    03.6
08CC:  MOVWF  0D
08CD:  MOVLW  00
08CE:  MOVWF  0F
08CF:  BCF    0A.3
08D0:  BCF    03.6
08D1:  CALL   13C
08D2:  BSF    0A.3
....................  
....................  
....................   while(TRUE){ 
....................   nut(); 
08D3:  BCF    0A.3
08D4:  GOTO   1B0
08D5:  BSF    0A.3
....................       // T2 
....................    message4[7]  = (T2 / 100) % 10  + 48; 
08D6:  BSF    03.5
08D7:  MOVF   27,W
08D8:  MOVWF  2F
08D9:  MOVF   26,W
08DA:  MOVWF  2E
08DB:  CLRF   31
08DC:  MOVLW  64
08DD:  MOVWF  30
08DE:  BCF    0A.3
08DF:  BCF    03.5
08E0:  CALL   1C4
08E1:  BSF    0A.3
08E2:  MOVF   79,W
08E3:  BSF    03.5
08E4:  MOVWF  2D
08E5:  MOVF   78,W
08E6:  MOVWF  2C
08E7:  MOVF   2D,W
08E8:  MOVWF  2F
08E9:  MOVF   2C,W
08EA:  MOVWF  2E
08EB:  CLRF   31
08EC:  MOVLW  0A
08ED:  MOVWF  30
08EE:  BCF    0A.3
08EF:  BCF    03.5
08F0:  CALL   1C4
08F1:  BSF    0A.3
08F2:  MOVF   77,W
08F3:  BSF    03.5
08F4:  MOVWF  2C
08F5:  MOVF   7A,W
08F6:  MOVWF  2D
08F7:  MOVLW  30
08F8:  ADDWF  2C,W
08F9:  BCF    03.5
08FA:  MOVWF  51
....................    message4[8]  = (T2 / 10) % 10  + 48; 
08FB:  BSF    03.5
08FC:  MOVF   27,W
08FD:  MOVWF  2F
08FE:  MOVF   26,W
08FF:  MOVWF  2E
0900:  CLRF   31
0901:  MOVLW  0A
0902:  MOVWF  30
0903:  BCF    0A.3
0904:  BCF    03.5
0905:  CALL   1C4
0906:  BSF    0A.3
0907:  MOVF   79,W
0908:  BSF    03.5
0909:  MOVWF  2D
090A:  MOVF   78,W
090B:  MOVWF  2C
090C:  MOVF   2D,W
090D:  MOVWF  2F
090E:  MOVF   2C,W
090F:  MOVWF  2E
0910:  CLRF   31
0911:  MOVLW  0A
0912:  MOVWF  30
0913:  BCF    0A.3
0914:  BCF    03.5
0915:  CALL   1C4
0916:  BSF    0A.3
0917:  MOVF   77,W
0918:  BSF    03.5
0919:  MOVWF  2C
091A:  MOVF   7A,W
091B:  MOVWF  2D
091C:  MOVLW  30
091D:  ADDWF  2C,W
091E:  BCF    03.5
091F:  MOVWF  52
....................    message4[10] = T2 % 10  + 48; 
0920:  BSF    03.5
0921:  MOVF   27,W
0922:  MOVWF  2F
0923:  MOVF   26,W
0924:  MOVWF  2E
0925:  CLRF   31
0926:  MOVLW  0A
0927:  MOVWF  30
0928:  BCF    0A.3
0929:  BCF    03.5
092A:  CALL   1C4
092B:  BSF    0A.3
092C:  MOVF   77,W
092D:  BSF    03.5
092E:  MOVWF  2C
092F:  MOVF   7A,W
0930:  MOVWF  2D
0931:  MOVLW  30
0932:  ADDWF  2C,W
0933:  BCF    03.5
0934:  MOVWF  54
....................    message4[11] = 223;  
0935:  MOVLW  DF
0936:  MOVWF  55
....................    // T1 
....................    message3[7]  = (T1 / 100) % 10  + 48; 
0937:  BSF    03.5
0938:  MOVF   25,W
0939:  MOVWF  2F
093A:  MOVF   24,W
093B:  MOVWF  2E
093C:  CLRF   31
093D:  MOVLW  64
093E:  MOVWF  30
093F:  BCF    0A.3
0940:  BCF    03.5
0941:  CALL   1C4
0942:  BSF    0A.3
0943:  MOVF   79,W
0944:  BSF    03.5
0945:  MOVWF  2D
0946:  MOVF   78,W
0947:  MOVWF  2C
0948:  MOVF   2D,W
0949:  MOVWF  2F
094A:  MOVF   2C,W
094B:  MOVWF  2E
094C:  CLRF   31
094D:  MOVLW  0A
094E:  MOVWF  30
094F:  BCF    0A.3
0950:  BCF    03.5
0951:  CALL   1C4
0952:  BSF    0A.3
0953:  MOVF   77,W
0954:  BSF    03.5
0955:  MOVWF  2C
0956:  MOVF   7A,W
0957:  MOVWF  2D
0958:  MOVLW  30
0959:  ADDWF  2C,W
095A:  BCF    03.5
095B:  MOVWF  43
....................    message3[8]  = (T1 / 10) % 10  + 48; 
095C:  BSF    03.5
095D:  MOVF   25,W
095E:  MOVWF  2F
095F:  MOVF   24,W
0960:  MOVWF  2E
0961:  CLRF   31
0962:  MOVLW  0A
0963:  MOVWF  30
0964:  BCF    0A.3
0965:  BCF    03.5
0966:  CALL   1C4
0967:  BSF    0A.3
0968:  MOVF   79,W
0969:  BSF    03.5
096A:  MOVWF  2D
096B:  MOVF   78,W
096C:  MOVWF  2C
096D:  MOVF   2D,W
096E:  MOVWF  2F
096F:  MOVF   2C,W
0970:  MOVWF  2E
0971:  CLRF   31
0972:  MOVLW  0A
0973:  MOVWF  30
0974:  BCF    0A.3
0975:  BCF    03.5
0976:  CALL   1C4
0977:  BSF    0A.3
0978:  MOVF   77,W
0979:  BSF    03.5
097A:  MOVWF  2C
097B:  MOVF   7A,W
097C:  MOVWF  2D
097D:  MOVLW  30
097E:  ADDWF  2C,W
097F:  BCF    03.5
0980:  MOVWF  44
....................    message3[10] = T1 % 10  + 48; 
0981:  BSF    03.5
0982:  MOVF   25,W
0983:  MOVWF  2F
0984:  MOVF   24,W
0985:  MOVWF  2E
0986:  CLRF   31
0987:  MOVLW  0A
0988:  MOVWF  30
0989:  BCF    0A.3
098A:  BCF    03.5
098B:  CALL   1C4
098C:  BSF    0A.3
098D:  MOVF   77,W
098E:  BSF    03.5
098F:  MOVWF  2C
0990:  MOVF   7A,W
0991:  MOVWF  2D
0992:  MOVLW  30
0993:  ADDWF  2C,W
0994:  BCF    03.5
0995:  MOVWF  46
....................    message3[11] = 223; 
0996:  MOVLW  DF
0997:  MOVWF  47
....................    // RH1 
....................    message5[7]  = (RH1 / 100) % 10 + 48; 
0998:  BSF    03.5
0999:  MOVF   29,W
099A:  MOVWF  2F
099B:  MOVF   28,W
099C:  MOVWF  2E
099D:  CLRF   31
099E:  MOVLW  64
099F:  MOVWF  30
09A0:  BCF    0A.3
09A1:  BCF    03.5
09A2:  CALL   1C4
09A3:  BSF    0A.3
09A4:  MOVF   79,W
09A5:  BSF    03.5
09A6:  MOVWF  2D
09A7:  MOVF   78,W
09A8:  MOVWF  2C
09A9:  MOVF   2D,W
09AA:  MOVWF  2F
09AB:  MOVF   2C,W
09AC:  MOVWF  2E
09AD:  CLRF   31
09AE:  MOVLW  0A
09AF:  MOVWF  30
09B0:  BCF    0A.3
09B1:  BCF    03.5
09B2:  CALL   1C4
09B3:  BSF    0A.3
09B4:  MOVF   77,W
09B5:  BSF    03.5
09B6:  MOVWF  2C
09B7:  MOVF   7A,W
09B8:  MOVWF  2D
09B9:  MOVLW  30
09BA:  ADDWF  2C,W
09BB:  BCF    03.5
09BC:  MOVWF  5F
....................    message5[8]  = (RH1 / 10) % 10 + 48; 
09BD:  BSF    03.5
09BE:  MOVF   29,W
09BF:  MOVWF  2F
09C0:  MOVF   28,W
09C1:  MOVWF  2E
09C2:  CLRF   31
09C3:  MOVLW  0A
09C4:  MOVWF  30
09C5:  BCF    0A.3
09C6:  BCF    03.5
09C7:  CALL   1C4
09C8:  BSF    0A.3
09C9:  MOVF   79,W
09CA:  BSF    03.5
09CB:  MOVWF  2D
09CC:  MOVF   78,W
09CD:  MOVWF  2C
09CE:  MOVF   2D,W
09CF:  MOVWF  2F
09D0:  MOVF   2C,W
09D1:  MOVWF  2E
09D2:  CLRF   31
09D3:  MOVLW  0A
09D4:  MOVWF  30
09D5:  BCF    0A.3
09D6:  BCF    03.5
09D7:  CALL   1C4
09D8:  BSF    0A.3
09D9:  MOVF   77,W
09DA:  BSF    03.5
09DB:  MOVWF  2C
09DC:  MOVF   7A,W
09DD:  MOVWF  2D
09DE:  MOVLW  30
09DF:  ADDWF  2C,W
09E0:  BCF    03.5
09E1:  MOVWF  60
....................    message5[10] = RH1 % 10 + 48; 
09E2:  BSF    03.5
09E3:  MOVF   29,W
09E4:  MOVWF  2F
09E5:  MOVF   28,W
09E6:  MOVWF  2E
09E7:  CLRF   31
09E8:  MOVLW  0A
09E9:  MOVWF  30
09EA:  BCF    0A.3
09EB:  BCF    03.5
09EC:  CALL   1C4
09ED:  BSF    0A.3
09EE:  MOVF   77,W
09EF:  BSF    03.5
09F0:  MOVWF  2C
09F1:  MOVF   7A,W
09F2:  MOVWF  2D
09F3:  MOVLW  30
09F4:  ADDWF  2C,W
09F5:  BCF    03.5
09F6:  MOVWF  62
....................    //RH2 
....................    message6[7]  = (RH2 / 100) % 10 + 48; 
09F7:  BSF    03.5
09F8:  MOVF   2B,W
09F9:  MOVWF  2F
09FA:  MOVF   2A,W
09FB:  MOVWF  2E
09FC:  CLRF   31
09FD:  MOVLW  64
09FE:  MOVWF  30
09FF:  BCF    0A.3
0A00:  BCF    03.5
0A01:  CALL   1C4
0A02:  BSF    0A.3
0A03:  MOVF   79,W
0A04:  BSF    03.5
0A05:  MOVWF  2D
0A06:  MOVF   78,W
0A07:  MOVWF  2C
0A08:  MOVF   2D,W
0A09:  MOVWF  2F
0A0A:  MOVF   2C,W
0A0B:  MOVWF  2E
0A0C:  CLRF   31
0A0D:  MOVLW  0A
0A0E:  MOVWF  30
0A0F:  BCF    0A.3
0A10:  BCF    03.5
0A11:  CALL   1C4
0A12:  BSF    0A.3
0A13:  MOVF   77,W
0A14:  BSF    03.5
0A15:  MOVWF  2C
0A16:  MOVF   7A,W
0A17:  MOVWF  2D
0A18:  MOVLW  30
0A19:  ADDWF  2C,W
0A1A:  BCF    03.5
0A1B:  MOVWF  6D
....................    message6[8]  = (RH2 / 10) % 10 + 48; 
0A1C:  BSF    03.5
0A1D:  MOVF   2B,W
0A1E:  MOVWF  2F
0A1F:  MOVF   2A,W
0A20:  MOVWF  2E
0A21:  CLRF   31
0A22:  MOVLW  0A
0A23:  MOVWF  30
0A24:  BCF    0A.3
0A25:  BCF    03.5
0A26:  CALL   1C4
0A27:  BSF    0A.3
0A28:  MOVF   79,W
0A29:  BSF    03.5
0A2A:  MOVWF  2D
0A2B:  MOVF   78,W
0A2C:  MOVWF  2C
0A2D:  MOVF   2D,W
0A2E:  MOVWF  2F
0A2F:  MOVF   2C,W
0A30:  MOVWF  2E
0A31:  CLRF   31
0A32:  MOVLW  0A
0A33:  MOVWF  30
0A34:  BCF    0A.3
0A35:  BCF    03.5
0A36:  CALL   1C4
0A37:  BSF    0A.3
0A38:  MOVF   77,W
0A39:  BSF    03.5
0A3A:  MOVWF  2C
0A3B:  MOVF   7A,W
0A3C:  MOVWF  2D
0A3D:  MOVLW  30
0A3E:  ADDWF  2C,W
0A3F:  BCF    03.5
0A40:  MOVWF  6E
....................    message6[10] = RH2 % 10 + 48; 
0A41:  BSF    03.5
0A42:  MOVF   2B,W
0A43:  MOVWF  2F
0A44:  MOVF   2A,W
0A45:  MOVWF  2E
0A46:  CLRF   31
0A47:  MOVLW  0A
0A48:  MOVWF  30
0A49:  BCF    0A.3
0A4A:  BCF    03.5
0A4B:  CALL   1C4
0A4C:  BSF    0A.3
0A4D:  MOVF   77,W
0A4E:  BSF    03.5
0A4F:  MOVWF  2C
0A50:  MOVF   7A,W
0A51:  MOVWF  2D
0A52:  MOVLW  30
0A53:  ADDWF  2C,W
0A54:  MOVWF  70
....................    switch(set){ 
0A55:  MOVLW  01
0A56:  SUBWF  7E,W
0A57:  ADDLW  FB
0A58:  BTFSC  03.0
0A59:  GOTO   523
0A5A:  ADDLW  05
0A5B:  BCF    03.5
0A5C:  GOTO   526
....................    case 1 : 
....................     { 
....................     do{ 
....................       if(input(pin_a0)==0) 
0A5D:  BSF    03.5
0A5E:  BSF    05.0
0A5F:  BCF    03.5
0A60:  BTFSC  05.0
0A61:  GOTO   26E
....................       { 
....................          while(input(pin_a0)==0) 
0A62:  BSF    03.5
0A63:  BSF    05.0
0A64:  BCF    03.5
0A65:  BTFSS  05.0
....................          { 
0A66:  GOTO   262
....................          } 
....................          T1=T1+100; 
0A67:  MOVLW  64
0A68:  BSF    03.5
0A69:  ADDWF  24,F
0A6A:  BTFSC  03.0
0A6B:  INCF   25,F
....................           
....................       }else if (input(pin_a1)==0) 
0A6C:  GOTO   2C4
0A6D:  BCF    03.5
0A6E:  BSF    03.5
0A6F:  BSF    05.1
0A70:  BCF    03.5
0A71:  BTFSC  05.1
0A72:  GOTO   27F
....................        { 
....................          while(input(pin_a1)==0) 
0A73:  BSF    03.5
0A74:  BSF    05.1
0A75:  BCF    03.5
0A76:  BTFSS  05.1
....................          { 
0A77:  GOTO   273
....................          } 
....................          T1=T1+10; 
0A78:  MOVLW  0A
0A79:  BSF    03.5
0A7A:  ADDWF  24,F
0A7B:  BTFSC  03.0
0A7C:  INCF   25,F
....................        } else if(input(pin_a2)==0) 
0A7D:  GOTO   2C4
0A7E:  BCF    03.5
0A7F:  BSF    03.5
0A80:  BSF    05.2
0A81:  BCF    03.5
0A82:  BTFSC  05.2
0A83:  GOTO   28F
....................        { 
....................          while(input(pin_a2)==0) 
0A84:  BSF    03.5
0A85:  BSF    05.2
0A86:  BCF    03.5
0A87:  BTFSS  05.2
....................          { 
0A88:  GOTO   284
....................          } 
....................          T1++; 
0A89:  BSF    03.5
0A8A:  INCF   24,F
0A8B:  BTFSC  03.2
0A8C:  INCF   25,F
....................        } 
0A8D:  GOTO   2C4
0A8E:  BCF    03.5
....................        else if(input(pin_a3)==0) 
0A8F:  BSF    03.5
0A90:  BSF    05.3
0A91:  BCF    03.5
0A92:  BTFSC  05.3
0A93:  GOTO   2A2
....................       { 
....................          while(input(pin_a3)==0) 
0A94:  BSF    03.5
0A95:  BSF    05.3
0A96:  BCF    03.5
0A97:  BTFSS  05.3
....................          { 
0A98:  GOTO   294
....................          } 
....................          T1=T1-100; 
0A99:  MOVLW  64
0A9A:  BSF    03.5
0A9B:  SUBWF  24,F
0A9C:  MOVLW  00
0A9D:  BTFSS  03.0
0A9E:  MOVLW  01
0A9F:  SUBWF  25,F
....................           
....................       }else if (input(pin_a4)==0) 
0AA0:  GOTO   2C4
0AA1:  BCF    03.5
0AA2:  BSF    03.5
0AA3:  BSF    05.4
0AA4:  BCF    03.5
0AA5:  BTFSC  05.4
0AA6:  GOTO   2B5
....................        { 
....................          while(input(pin_a4)==0) 
0AA7:  BSF    03.5
0AA8:  BSF    05.4
0AA9:  BCF    03.5
0AAA:  BTFSS  05.4
....................          { 
0AAB:  GOTO   2A7
....................          } 
....................          T1=T1-10; 
0AAC:  MOVLW  0A
0AAD:  BSF    03.5
0AAE:  SUBWF  24,F
0AAF:  MOVLW  00
0AB0:  BTFSS  03.0
0AB1:  MOVLW  01
0AB2:  SUBWF  25,F
....................        } else if(input(pin_a5)==0) 
0AB3:  GOTO   2C4
0AB4:  BCF    03.5
0AB5:  BSF    03.5
0AB6:  BSF    05.5
0AB7:  BCF    03.5
0AB8:  BTFSC  05.5
0AB9:  GOTO   2C5
....................        { 
....................          while(input(pin_a5)==0) 
0ABA:  BSF    03.5
0ABB:  BSF    05.5
0ABC:  BCF    03.5
0ABD:  BTFSS  05.5
....................          { 
0ABE:  GOTO   2BA
....................          } 
....................          T1--; 
0ABF:  BSF    03.5
0AC0:  MOVF   24,W
0AC1:  BTFSC  03.2
0AC2:  DECF   25,F
0AC3:  DECF   24,F
0AC4:  BCF    03.5
....................        } 
....................         lcd_gotoxy(1, 1);                     // Go to column 1 row 1 
0AC5:  MOVLW  01
0AC6:  BSF    03.5
0AC7:  MOVWF  30
0AC8:  MOVWF  31
0AC9:  BCF    0A.3
0ACA:  BCF    03.5
0ACB:  CALL   0EE
0ACC:  BSF    0A.3
....................         printf(lcd_putc,message3);           // Display message1 
0ACD:  MOVLW  3C
0ACE:  MOVWF  04
0ACF:  BCF    03.7
0AD0:  BCF    0A.3
0AD1:  CALL   1EB
0AD2:  BSF    0A.3
....................                 lcd_gotoxy(1, 2);                     // Go to column 1 row 1 
0AD3:  MOVLW  01
0AD4:  BSF    03.5
0AD5:  MOVWF  30
0AD6:  MOVLW  02
0AD7:  MOVWF  31
0AD8:  BCF    0A.3
0AD9:  BCF    03.5
0ADA:  CALL   0EE
0ADB:  BSF    0A.3
....................         printf(lcd_putc,message4);           // Display message1 
0ADC:  MOVLW  4A
0ADD:  MOVWF  04
0ADE:  BCF    03.7
0ADF:  BCF    0A.3
0AE0:  CALL   1EB
0AE1:  BSF    0A.3
....................         } 
....................      while(T1>300); 
0AE2:  BSF    03.5
0AE3:  MOVF   25,W
0AE4:  SUBLW  00
0AE5:  BTFSC  03.0
0AE6:  GOTO   2EE
0AE7:  XORLW  FF
0AE8:  BTFSS  03.2
0AE9:  GOTO   25E
0AEA:  MOVF   24,W
0AEB:  SUBLW  2C
0AEC:  BTFSS  03.0
0AED:  GOTO   25E
....................         break; 
0AEE:  GOTO   523
0AEF:  BCF    03.5
....................     } 
....................     case 2: 
....................     { 
....................     do{ 
....................       if(input(pin_a0)==0) 
0AF0:  BSF    03.5
0AF1:  BSF    05.0
0AF2:  BCF    03.5
0AF3:  BTFSC  05.0
0AF4:  GOTO   301
....................       { 
....................          while(input(pin_a0)==0) 
0AF5:  BSF    03.5
0AF6:  BSF    05.0
0AF7:  BCF    03.5
0AF8:  BTFSS  05.0
....................          { 
0AF9:  GOTO   2F5
....................          } 
....................          T2=T2+100; 
0AFA:  MOVLW  64
0AFB:  BSF    03.5
0AFC:  ADDWF  26,F
0AFD:  BTFSC  03.0
0AFE:  INCF   27,F
....................       }else if (input(pin_a1)==0) 
0AFF:  GOTO   357
0B00:  BCF    03.5
0B01:  BSF    03.5
0B02:  BSF    05.1
0B03:  BCF    03.5
0B04:  BTFSC  05.1
0B05:  GOTO   312
....................        { 
....................          while(input(pin_a1)==0) 
0B06:  BSF    03.5
0B07:  BSF    05.1
0B08:  BCF    03.5
0B09:  BTFSS  05.1
....................          { 
0B0A:  GOTO   306
....................          } 
....................          T2=T2+10; 
0B0B:  MOVLW  0A
0B0C:  BSF    03.5
0B0D:  ADDWF  26,F
0B0E:  BTFSC  03.0
0B0F:  INCF   27,F
....................        } else if(input(pin_a2)==0) 
0B10:  GOTO   357
0B11:  BCF    03.5
0B12:  BSF    03.5
0B13:  BSF    05.2
0B14:  BCF    03.5
0B15:  BTFSC  05.2
0B16:  GOTO   322
....................        { 
....................          while(input(pin_a2)==0) 
0B17:  BSF    03.5
0B18:  BSF    05.2
0B19:  BCF    03.5
0B1A:  BTFSS  05.2
....................          { 
0B1B:  GOTO   317
....................          } 
....................          T2++; 
0B1C:  BSF    03.5
0B1D:  INCF   26,F
0B1E:  BTFSC  03.2
0B1F:  INCF   27,F
....................        } 
0B20:  GOTO   357
0B21:  BCF    03.5
....................        else if(input(pin_a3)==0) 
0B22:  BSF    03.5
0B23:  BSF    05.3
0B24:  BCF    03.5
0B25:  BTFSC  05.3
0B26:  GOTO   335
....................       { 
....................          while(input(pin_a3)==0) 
0B27:  BSF    03.5
0B28:  BSF    05.3
0B29:  BCF    03.5
0B2A:  BTFSS  05.3
....................          { 
0B2B:  GOTO   327
....................          } 
....................          T2=T2-100; 
0B2C:  MOVLW  64
0B2D:  BSF    03.5
0B2E:  SUBWF  26,F
0B2F:  MOVLW  00
0B30:  BTFSS  03.0
0B31:  MOVLW  01
0B32:  SUBWF  27,F
....................           
....................       }else if (input(pin_a4)==0) 
0B33:  GOTO   357
0B34:  BCF    03.5
0B35:  BSF    03.5
0B36:  BSF    05.4
0B37:  BCF    03.5
0B38:  BTFSC  05.4
0B39:  GOTO   348
....................        { 
....................          while(input(pin_a4)==0) 
0B3A:  BSF    03.5
0B3B:  BSF    05.4
0B3C:  BCF    03.5
0B3D:  BTFSS  05.4
....................          { 
0B3E:  GOTO   33A
....................          } 
....................          T2=T2-10; 
0B3F:  MOVLW  0A
0B40:  BSF    03.5
0B41:  SUBWF  26,F
0B42:  MOVLW  00
0B43:  BTFSS  03.0
0B44:  MOVLW  01
0B45:  SUBWF  27,F
....................        } else if(input(pin_a5)==0) 
0B46:  GOTO   357
0B47:  BCF    03.5
0B48:  BSF    03.5
0B49:  BSF    05.5
0B4A:  BCF    03.5
0B4B:  BTFSC  05.5
0B4C:  GOTO   358
....................        { 
....................          while(input(pin_a5)==0) 
0B4D:  BSF    03.5
0B4E:  BSF    05.5
0B4F:  BCF    03.5
0B50:  BTFSS  05.5
....................          { 
0B51:  GOTO   34D
....................          } 
....................          T2--; 
0B52:  BSF    03.5
0B53:  MOVF   26,W
0B54:  BTFSC  03.2
0B55:  DECF   27,F
0B56:  DECF   26,F
0B57:  BCF    03.5
....................        } 
....................         lcd_gotoxy(1, 1);                     // Go to column 1 row 1 
0B58:  MOVLW  01
0B59:  BSF    03.5
0B5A:  MOVWF  30
0B5B:  MOVWF  31
0B5C:  BCF    0A.3
0B5D:  BCF    03.5
0B5E:  CALL   0EE
0B5F:  BSF    0A.3
....................         printf(lcd_putc,message3);           // Display message1 
0B60:  MOVLW  3C
0B61:  MOVWF  04
0B62:  BCF    03.7
0B63:  BCF    0A.3
0B64:  CALL   1EB
0B65:  BSF    0A.3
....................         lcd_gotoxy(1, 2);                     // Go to column 1 row 1 
0B66:  MOVLW  01
0B67:  BSF    03.5
0B68:  MOVWF  30
0B69:  MOVLW  02
0B6A:  MOVWF  31
0B6B:  BCF    0A.3
0B6C:  BCF    03.5
0B6D:  CALL   0EE
0B6E:  BSF    0A.3
....................         printf(lcd_putc,message4);           // Display message1 
0B6F:  MOVLW  4A
0B70:  MOVWF  04
0B71:  BCF    03.7
0B72:  BCF    0A.3
0B73:  CALL   1EB
0B74:  BSF    0A.3
....................         }while(T2<301); 
0B75:  BSF    03.5
0B76:  MOVF   27,W
0B77:  SUBLW  01
0B78:  BTFSS  03.0
0B79:  GOTO   380
0B7A:  BTFSS  03.2
0B7B:  GOTO   2F1
0B7C:  MOVF   26,W
0B7D:  SUBLW  2C
0B7E:  BTFSC  03.0
0B7F:  GOTO   2F1
....................         break; 
0B80:  GOTO   523
0B81:  BCF    03.5
....................     } 
....................     case 3 : 
....................      { 
....................      do{ 
....................       if(input(pin_a0)==0) 
0B82:  BSF    03.5
0B83:  BSF    05.0
0B84:  BCF    03.5
0B85:  BTFSC  05.0
0B86:  GOTO   393
....................       { 
....................          while(input(pin_a0)==0) 
0B87:  BSF    03.5
0B88:  BSF    05.0
0B89:  BCF    03.5
0B8A:  BTFSS  05.0
....................          { 
0B8B:  GOTO   387
....................          } 
....................          RH1=RH1+100; 
0B8C:  MOVLW  64
0B8D:  BSF    03.5
0B8E:  ADDWF  28,F
0B8F:  BTFSC  03.0
0B90:  INCF   29,F
....................       }else if (input(pin_a1)==0) 
0B91:  GOTO   3E9
0B92:  BCF    03.5
0B93:  BSF    03.5
0B94:  BSF    05.1
0B95:  BCF    03.5
0B96:  BTFSC  05.1
0B97:  GOTO   3A4
....................        { 
....................          while(input(pin_a1)==0) 
0B98:  BSF    03.5
0B99:  BSF    05.1
0B9A:  BCF    03.5
0B9B:  BTFSS  05.1
....................          { 
0B9C:  GOTO   398
....................          } 
....................          RH1=RH1+10; 
0B9D:  MOVLW  0A
0B9E:  BSF    03.5
0B9F:  ADDWF  28,F
0BA0:  BTFSC  03.0
0BA1:  INCF   29,F
....................        } else if(input(pin_a2)==0) 
0BA2:  GOTO   3E9
0BA3:  BCF    03.5
0BA4:  BSF    03.5
0BA5:  BSF    05.2
0BA6:  BCF    03.5
0BA7:  BTFSC  05.2
0BA8:  GOTO   3B4
....................        { 
....................          while(input(pin_a2)==0) 
0BA9:  BSF    03.5
0BAA:  BSF    05.2
0BAB:  BCF    03.5
0BAC:  BTFSS  05.2
....................          { 
0BAD:  GOTO   3A9
....................          } 
....................          RH1++; 
0BAE:  BSF    03.5
0BAF:  INCF   28,F
0BB0:  BTFSC  03.2
0BB1:  INCF   29,F
....................        } 
0BB2:  GOTO   3E9
0BB3:  BCF    03.5
....................               else if(input(pin_a3)==0) 
0BB4:  BSF    03.5
0BB5:  BSF    05.3
0BB6:  BCF    03.5
0BB7:  BTFSC  05.3
0BB8:  GOTO   3C7
....................       { 
....................          while(input(pin_a3)==0) 
0BB9:  BSF    03.5
0BBA:  BSF    05.3
0BBB:  BCF    03.5
0BBC:  BTFSS  05.3
....................          { 
0BBD:  GOTO   3B9
....................          } 
....................          RH1=RH1-100; 
0BBE:  MOVLW  64
0BBF:  BSF    03.5
0BC0:  SUBWF  28,F
0BC1:  MOVLW  00
0BC2:  BTFSS  03.0
0BC3:  MOVLW  01
0BC4:  SUBWF  29,F
....................           
....................       }else if (input(pin_a4)==0) 
0BC5:  GOTO   3E9
0BC6:  BCF    03.5
0BC7:  BSF    03.5
0BC8:  BSF    05.4
0BC9:  BCF    03.5
0BCA:  BTFSC  05.4
0BCB:  GOTO   3DA
....................        { 
....................          while(input(pin_a4)==0) 
0BCC:  BSF    03.5
0BCD:  BSF    05.4
0BCE:  BCF    03.5
0BCF:  BTFSS  05.4
....................          { 
0BD0:  GOTO   3CC
....................          } 
....................          RH1=RH1-10; 
0BD1:  MOVLW  0A
0BD2:  BSF    03.5
0BD3:  SUBWF  28,F
0BD4:  MOVLW  00
0BD5:  BTFSS  03.0
0BD6:  MOVLW  01
0BD7:  SUBWF  29,F
....................        } else if(input(pin_a5)==0) 
0BD8:  GOTO   3E9
0BD9:  BCF    03.5
0BDA:  BSF    03.5
0BDB:  BSF    05.5
0BDC:  BCF    03.5
0BDD:  BTFSC  05.5
0BDE:  GOTO   3EA
....................        { 
....................          while(input(pin_a5)==0) 
0BDF:  BSF    03.5
0BE0:  BSF    05.5
0BE1:  BCF    03.5
0BE2:  BTFSS  05.5
....................          { 
0BE3:  GOTO   3DF
....................          } 
....................          RH1--; 
0BE4:  BSF    03.5
0BE5:  MOVF   28,W
0BE6:  BTFSC  03.2
0BE7:  DECF   29,F
0BE8:  DECF   28,F
0BE9:  BCF    03.5
....................          } 
....................         lcd_gotoxy(1, 1);                     // Go to column 1 row 1 
0BEA:  MOVLW  01
0BEB:  BSF    03.5
0BEC:  MOVWF  30
0BED:  MOVWF  31
0BEE:  BCF    0A.3
0BEF:  BCF    03.5
0BF0:  CALL   0EE
0BF1:  BSF    0A.3
....................         printf(lcd_putc,message5);           // Display message1 
0BF2:  MOVLW  58
0BF3:  MOVWF  04
0BF4:  BCF    03.7
0BF5:  BCF    0A.3
0BF6:  CALL   1EB
0BF7:  BSF    0A.3
....................         lcd_gotoxy(1, 2);                     // Go to column 1 row 1 
0BF8:  MOVLW  01
0BF9:  BSF    03.5
0BFA:  MOVWF  30
0BFB:  MOVLW  02
0BFC:  MOVWF  31
0BFD:  BCF    0A.3
0BFE:  BCF    03.5
0BFF:  CALL   0EE
0C00:  BSF    0A.3
....................         printf(lcd_putc,message6);           // Display message1 
0C01:  MOVLW  66
0C02:  MOVWF  04
0C03:  BCF    03.7
0C04:  BCF    0A.3
0C05:  CALL   1EB
0C06:  BSF    0A.3
....................         }while(RH1>500); 
0C07:  BSF    03.5
0C08:  MOVF   29,W
0C09:  SUBLW  00
0C0A:  BTFSC  03.0
0C0B:  GOTO   413
0C0C:  XORLW  FF
0C0D:  BTFSS  03.2
0C0E:  GOTO   383
0C0F:  MOVF   28,W
0C10:  SUBLW  F4
0C11:  BTFSS  03.0
0C12:  GOTO   383
....................         break; 
0C13:  GOTO   523
0C14:  BCF    03.5
....................     } 
....................     case 4 : 
....................         { 
....................     do{ 
....................       if(input(pin_a0)==0) 
0C15:  BSF    03.5
0C16:  BSF    05.0
0C17:  BCF    03.5
0C18:  BTFSC  05.0
0C19:  GOTO   426
....................       { 
....................          while(input(pin_a0)==0) 
0C1A:  BSF    03.5
0C1B:  BSF    05.0
0C1C:  BCF    03.5
0C1D:  BTFSS  05.0
....................          { 
0C1E:  GOTO   41A
....................          } 
....................          RH2=RH2+100; 
0C1F:  MOVLW  64
0C20:  BSF    03.5
0C21:  ADDWF  2A,F
0C22:  BTFSC  03.0
0C23:  INCF   2B,F
....................       }else if (input(pin_a1)==0) 
0C24:  GOTO   47C
0C25:  BCF    03.5
0C26:  BSF    03.5
0C27:  BSF    05.1
0C28:  BCF    03.5
0C29:  BTFSC  05.1
0C2A:  GOTO   437
....................        { 
....................          while(input(pin_a1)==0) 
0C2B:  BSF    03.5
0C2C:  BSF    05.1
0C2D:  BCF    03.5
0C2E:  BTFSS  05.1
....................          { 
0C2F:  GOTO   42B
....................          } 
....................          RH2=RH2+10; 
0C30:  MOVLW  0A
0C31:  BSF    03.5
0C32:  ADDWF  2A,F
0C33:  BTFSC  03.0
0C34:  INCF   2B,F
....................        } else if(input(pin_a2)==0) 
0C35:  GOTO   47C
0C36:  BCF    03.5
0C37:  BSF    03.5
0C38:  BSF    05.2
0C39:  BCF    03.5
0C3A:  BTFSC  05.2
0C3B:  GOTO   447
....................        { 
....................          while(input(pin_a2)==0) 
0C3C:  BSF    03.5
0C3D:  BSF    05.2
0C3E:  BCF    03.5
0C3F:  BTFSS  05.2
....................          { 
0C40:  GOTO   43C
....................          } 
....................          RH2++; 
0C41:  BSF    03.5
0C42:  INCF   2A,F
0C43:  BTFSC  03.2
0C44:  INCF   2B,F
....................        } 
0C45:  GOTO   47C
0C46:  BCF    03.5
....................        else if(input(pin_a3)==0) 
0C47:  BSF    03.5
0C48:  BSF    05.3
0C49:  BCF    03.5
0C4A:  BTFSC  05.3
0C4B:  GOTO   45A
....................       { 
....................          while(input(pin_a3)==0) 
0C4C:  BSF    03.5
0C4D:  BSF    05.3
0C4E:  BCF    03.5
0C4F:  BTFSS  05.3
....................          { 
0C50:  GOTO   44C
....................          } 
....................          RH2=RH2-100; 
0C51:  MOVLW  64
0C52:  BSF    03.5
0C53:  SUBWF  2A,F
0C54:  MOVLW  00
0C55:  BTFSS  03.0
0C56:  MOVLW  01
0C57:  SUBWF  2B,F
....................           
....................       }else if (input(pin_a4)==0) 
0C58:  GOTO   47C
0C59:  BCF    03.5
0C5A:  BSF    03.5
0C5B:  BSF    05.4
0C5C:  BCF    03.5
0C5D:  BTFSC  05.4
0C5E:  GOTO   46D
....................        { 
....................          while(input(pin_a4)==0) 
0C5F:  BSF    03.5
0C60:  BSF    05.4
0C61:  BCF    03.5
0C62:  BTFSS  05.4
....................          { 
0C63:  GOTO   45F
....................          } 
....................          RH2=RH2-10; 
0C64:  MOVLW  0A
0C65:  BSF    03.5
0C66:  SUBWF  2A,F
0C67:  MOVLW  00
0C68:  BTFSS  03.0
0C69:  MOVLW  01
0C6A:  SUBWF  2B,F
....................        } else if(input(pin_a5)==0) 
0C6B:  GOTO   47C
0C6C:  BCF    03.5
0C6D:  BSF    03.5
0C6E:  BSF    05.5
0C6F:  BCF    03.5
0C70:  BTFSC  05.5
0C71:  GOTO   47D
....................        { 
....................          while(input(pin_a5)==0) 
0C72:  BSF    03.5
0C73:  BSF    05.5
0C74:  BCF    03.5
0C75:  BTFSS  05.5
....................          { 
0C76:  GOTO   472
....................          } 
....................          RH2--; 
0C77:  BSF    03.5
0C78:  MOVF   2A,W
0C79:  BTFSC  03.2
0C7A:  DECF   2B,F
0C7B:  DECF   2A,F
0C7C:  BCF    03.5
....................        } 
....................         lcd_gotoxy(1, 1);                     // Go to column 1 row 1 
0C7D:  MOVLW  01
0C7E:  BSF    03.5
0C7F:  MOVWF  30
0C80:  MOVWF  31
0C81:  BCF    0A.3
0C82:  BCF    03.5
0C83:  CALL   0EE
0C84:  BSF    0A.3
....................         printf(lcd_putc,message5);           // Display message1 
0C85:  MOVLW  58
0C86:  MOVWF  04
0C87:  BCF    03.7
0C88:  BCF    0A.3
0C89:  CALL   1EB
0C8A:  BSF    0A.3
....................         lcd_gotoxy(1, 2);                     // Go to column 1 row 1 
0C8B:  MOVLW  01
0C8C:  BSF    03.5
0C8D:  MOVWF  30
0C8E:  MOVLW  02
0C8F:  MOVWF  31
0C90:  BCF    0A.3
0C91:  BCF    03.5
0C92:  CALL   0EE
0C93:  BSF    0A.3
....................         printf(lcd_putc,message6);           // Display message1 
0C94:  MOVLW  66
0C95:  MOVWF  04
0C96:  BCF    03.7
0C97:  BCF    0A.3
0C98:  CALL   1EB
0C99:  BSF    0A.3
....................         }while(RH2<501); 
0C9A:  BSF    03.5
0C9B:  MOVF   2B,W
0C9C:  SUBLW  01
0C9D:  BTFSS  03.0
0C9E:  GOTO   4A5
0C9F:  BTFSS  03.2
0CA0:  GOTO   416
0CA1:  MOVF   2A,W
0CA2:  SUBLW  F4
0CA3:  BTFSC  03.0
0CA4:  GOTO   416
....................         break;         
0CA5:  GOTO   523
0CA6:  BCF    03.5
....................     } 
....................     case 5 : 
....................     { 
....................       DHT22(); 
0CA7:  BCF    0A.3
0CA8:  GOTO   25C
0CA9:  BSF    0A.3
....................       puts(message1); 
0CAA:  MOVLW  20
0CAB:  MOVWF  04
0CAC:  BCF    03.7
0CAD:  BCF    0A.3
0CAE:  CALL   3E6
0CAF:  BSF    0A.3
0CB0:  MOVLW  0D
0CB1:  BTFSS  0C.4
0CB2:  GOTO   4B1
0CB3:  MOVWF  19
0CB4:  MOVLW  0A
0CB5:  BTFSS  0C.4
0CB6:  GOTO   4B5
0CB7:  MOVWF  19
....................       puts(message2); 
0CB8:  MOVLW  2E
0CB9:  MOVWF  04
0CBA:  BCF    03.7
0CBB:  BCF    0A.3
0CBC:  CALL   3E6
0CBD:  BSF    0A.3
0CBE:  MOVLW  0D
0CBF:  BTFSS  0C.4
0CC0:  GOTO   4BF
0CC1:  MOVWF  19
0CC2:  MOVLW  0A
0CC3:  BTFSS  0C.4
0CC4:  GOTO   4C3
0CC5:  MOVWF  19
....................       if(RH<RH1) 
0CC6:  BSF    03.5
0CC7:  MOVF   23,W
0CC8:  SUBWF  29,W
0CC9:  BTFSS  03.0
0CCA:  GOTO   4DA
0CCB:  BTFSS  03.2
0CCC:  GOTO   4D1
0CCD:  MOVF   28,W
0CCE:  SUBWF  22,W
0CCF:  BTFSC  03.0
0CD0:  GOTO   4DA
....................       { 
....................         output_high(pin_b3); 
0CD1:  BCF    06.3
0CD2:  BCF    03.5
0CD3:  BSF    06.3
....................         output_low(pin_b4); 
0CD4:  BSF    03.5
0CD5:  BCF    06.4
0CD6:  BCF    03.5
0CD7:  BCF    06.4
....................       } 
0CD8:  GOTO   4F4
0CD9:  BSF    03.5
....................       else if(RH>RH2) 
0CDA:  MOVF   2B,W
0CDB:  SUBWF  23,W
0CDC:  BTFSS  03.0
0CDD:  GOTO   4ED
0CDE:  BTFSS  03.2
0CDF:  GOTO   4E4
0CE0:  MOVF   22,W
0CE1:  SUBWF  2A,W
0CE2:  BTFSC  03.0
0CE3:  GOTO   4ED
....................       { 
....................         output_high(pin_b4); 
0CE4:  BCF    06.4
0CE5:  BCF    03.5
0CE6:  BSF    06.4
....................         output_low(pin_b3); 
0CE7:  BSF    03.5
0CE8:  BCF    06.3
0CE9:  BCF    03.5
0CEA:  BCF    06.3
....................       } 
0CEB:  GOTO   4F4
0CEC:  BSF    03.5
....................       else  
....................       { 
....................          output_low(pin_b4); 
0CED:  BCF    06.4
0CEE:  BCF    03.5
0CEF:  BCF    06.4
....................          output_low(pin_b3); 
0CF0:  BSF    03.5
0CF1:  BCF    06.3
0CF2:  BCF    03.5
0CF3:  BCF    06.3
....................       } 
....................       if(T1>Temp) 
0CF4:  BSF    03.5
0CF5:  MOVF   21,W
0CF6:  SUBWF  25,W
0CF7:  BTFSS  03.0
0CF8:  GOTO   508
0CF9:  BTFSS  03.2
0CFA:  GOTO   4FF
0CFB:  MOVF   24,W
0CFC:  SUBWF  20,W
0CFD:  BTFSC  03.0
0CFE:  GOTO   508
....................       { 
....................          output_high(pin_b1); 
0CFF:  BCF    06.1
0D00:  BCF    03.5
0D01:  BSF    06.1
....................          output_low(pin_b2); 
0D02:  BSF    03.5
0D03:  BCF    06.2
0D04:  BCF    03.5
0D05:  BCF    06.2
....................       } else if(Temp>T2) 
0D06:  GOTO   522
0D07:  BSF    03.5
0D08:  MOVF   27,W
0D09:  SUBWF  21,W
0D0A:  BTFSS  03.0
0D0B:  GOTO   51B
0D0C:  BTFSS  03.2
0D0D:  GOTO   512
0D0E:  MOVF   20,W
0D0F:  SUBWF  26,W
0D10:  BTFSC  03.0
0D11:  GOTO   51B
....................       { 
....................          output_high(pin_b2); 
0D12:  BCF    06.2
0D13:  BCF    03.5
0D14:  BSF    06.2
....................          output_low(pin_b1); 
0D15:  BSF    03.5
0D16:  BCF    06.1
0D17:  BCF    03.5
0D18:  BCF    06.1
....................        }  
0D19:  GOTO   522
0D1A:  BSF    03.5
....................        else 
....................        { 
....................          output_low(pin_b1); 
0D1B:  BCF    06.1
0D1C:  BCF    03.5
0D1D:  BCF    06.1
....................          output_low(pin_b2); 
0D1E:  BSF    03.5
0D1F:  BCF    06.2
0D20:  BCF    03.5
0D21:  BCF    06.2
0D22:  BSF    03.5
....................        } 
....................     }    
.................... } 
0D23:  BCF    03.5
0D24:  GOTO   0D3
.................... } 
.................... } 
....................    
0D25:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
